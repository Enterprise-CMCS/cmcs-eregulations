name: Deploy CDK

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  actions: read

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:  
  deploy-cdk:  
    strategy:      
      max-parallel: 1      
      matrix:        
        environment: ["dev", "val", "prod"]
    environment:
      name: ${{ matrix.environment }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true     
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Deploy static assets infrastructure
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          CDK_DEBUG: true
        run: |
          pushd cdk-eregs
          npm install -g aws-cdk@latest @aws-sdk/client-ssm
          npm install
          
          # Get exact stack name
          STATICASSET_STACK="cms-eregs-${{ matrix.environment }}-static-assets"
          
          cdk deploy ${STATICASSET_STACK} \
          -c environment=${{ matrix.environment }} \
          -c deploymentType=infrastructure \
          --require-approval never \
          --exclusively \
          --app "npx ts-node bin/static-assets.ts" \
          --outputs-file static-outputs.json
          popd

      - name: Get Static URL
        id: get-static-url
        run: |
          pushd cdk-eregs
          STATIC_STACK="cms-eregs-${{ matrix.environment }}-static-assets"
          STATIC_URL=$(cat static-outputs.json | jq -r ".[\"$STATIC_STACK\"].StaticURL")
          echo "static_url=${STATIC_URL}" >> $GITHUB_OUTPUT
          popd

      - name: Deploy ZIP-based Lambdas
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          CDK_DEBUG: true
        run: |
          pushd cdk-eregs
          npm install -g aws-cdk@latest @aws-sdk/client-ssm
          npm install
          
          # Get exact stack names
          REDIRECT_STACK="cms-eregs-${{ matrix.environment }}-redirect-api"
          MAINTENANCE_STACK="cms-eregs-${{ matrix.environment }}-maintenance-api"
          
          cdk deploy ${REDIRECT_STACK} ${MAINTENANCE_STACK} \
          -c environment=${{ matrix.environment }} \
          --require-approval never \
          --exclusively \
          --app "npx ts-node bin/zip-lambdas.ts"
          popd

      - name: Deploy text extractor
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          CDK_DEBUG: true
        run: |
          pushd cdk-eregs
          npm install -g aws-cdk@latest @aws-sdk/client-ssm
          npm install
          
          TEXT_EXTRACTOR_STACK="cms-eregs-${{ matrix.environment }}-text-extractor"
          
          cdk deploy $TEXT_EXTRACTOR_STACK \
          -c environment=${{ matrix.environment }} \
          --require-approval never \
          --exclusively \
          --app "npx ts-node bin/docker-lambdas.ts"
          popd

      - name: Deploy site lambdas
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          CDK_DEBUG: true
        run: |
          pushd cdk-eregs
          npm install -g aws-cdk@latest @aws-sdk/client-ssm
          npm install
          
          # Get exact stack name
          API_STACK="cms-eregs-${{ matrix.environment }}-api"
          
          cdk deploy $API_STACK \
          -c environment=${{ matrix.environment }} \
          -c buildId="${GITHUB_RUN_ID}" \
          --require-approval never \
          --exclusively \
          --app "npx ts-node bin/docker-lambdas.ts" \
          --outputs-file api-outputs.json
          popd

      - name: Invoke setup functions after site lambdas deployed
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          CDK_DEBUG: true
        run: |
          aws lambda invoke --function-name cms-eregs-${{ matrix.environment }}-migrate /dev/stdout | tee -a aws.log
          aws lambda invoke --function-name cms-eregs-${{ matrix.environment }}-createsu /dev/stdout | tee -a aws.log 
          # Check for invocation errors
          ! grep -q FunctionError aws.log

      - name: Get API URL
        id: get-api-url
        run: |
          pushd cdk-eregs
          API_STACK="cms-eregs-${{ matrix.environment }}-api"
          API_URL=$(cat api-outputs.json | jq -r ".[\"$API_STACK\"].ApiUrl")
          API_URL=${API_URL%/}
          echo "api_url=${API_URL}" >> $GITHUB_OUTPUT
          popd

      - name: Deploy FR Parser
        env:        
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          CDK_DEBUG: true
        run: |
          pushd cdk-eregs
          npm install -g aws-cdk@latest @aws-sdk/client-ssm
          npm install
          
          FR_PARSER_STACK="cms-eregs-${{ matrix.environment }}-fr-parser"
          
          cdk deploy $FR_PARSER_STACK \
          -c environment=${{ matrix.environment }} \
          --require-approval never \
          --exclusively \
          --app "npx ts-node bin/docker-lambdas.ts"
          popd

      - name: Deploy ECFR Parser
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          CDK_DEBUG: true
        run: |
          pushd cdk-eregs
          npm install -g aws-cdk@latest @aws-sdk/client-ssm
          npm install
          
          ECFR_PARSER_STACK="cms-eregs-${{ matrix.environment }}-ecfr-parser"
          
          cdk deploy $ECFR_PARSER_STACK \
          -c environment=${{ matrix.environment }} \
          --require-approval never \
          --exclusively \
          --app "npx ts-node bin/docker-lambdas.ts"
          popd

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Python dependencies
        run: |
          mv ./solution/backend/requirements_tmp.txt ./solution/backend/requirements.txt
          python -m pip install --upgrade pip
          pip install -r ./solution/static-assets/requirements.txt
          pip install -r ./solution/backend/requirements.txt

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_VITE_API_URL: ${{ steps.get-api-url.outputs.api_url }}
          directory: solution/ui/regulations/eregs-vite
          file_name: .env

      - name: Run collectstatic
        env:
          STATIC_URL: ${{ steps.get-static-url.outputs.static_url }}
          STATIC_ROOT: ../static-assets/regulations
          VITE_ENV: ${{ matrix.environment }}
        run: |
          pushd solution/backend
          python manage.py collectstatic --noinput
          cd ..
          popd

      - name: Build Vite assets
        env:
          STATIC_URL: ${{ steps.get-static-url.outputs.static_url }}
          STATIC_ROOT: ../static-assets/regulations
          VITE_ENV: ${{ matrix.environment }}
        run: |
          pushd solution
          make regulations
          popd

      - name: Deploy Static Assets
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          CDK_DEBUG: true
        run: |
          pushd cdk-eregs
          npm install -g aws-cdk@latest @aws-sdk/client-ssm
          npm install
          
          # Get exact stack name
          STATICASSET_STACK="cms-eregs-${{ matrix.environment }}-static-assets"
          
          cdk deploy ${STATICASSET_STACK} \
          -c environment=${{ matrix.environment }} \
          -c deploymentType=content \
          --require-approval never \
          --exclusively \
          --app "npx ts-node bin/static-assets.ts" \
          --outputs-file static-outputs.json
          popd
