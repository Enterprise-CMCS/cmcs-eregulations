name: "Deploy Experimental"

on:
  pull_request:
    types: [opened, synchronize, reopened]


jobs:
  deploy-static:
    environment:
      name: "dev"
      url: ${{ steps.deploy-regulations-site-server.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      # Find the PR number.  This is not always trivial which is why this uses an existign action
      - name: Find PR number
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          # Can be "open", "closed", or "all".  Defaults to "open".
          state: open

      # should build first and save the artifact
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      # setup python
      - uses: actions/setup-python@v2
        if: success() && steps.findPr.outputs.number
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./solution/static-assets/requirements.txt
      # build the static assets for the website
      - name: build static assets
        if: success() && steps.findPr.outputs.number
        env:
          STATIC_URL: http://localhost:8888/
          STATIC_ROOT: ../static-assets/regulations
          VITE_ENV: dev-${{ steps.findPr.outputs.pr }}
        run: |
          pushd solution
          make regulations
          cd backend
          python manage.py collectstatic --noinput
          cd ..
          popd
      # deploy static assets to AWS
      - name: deploy static assets
        if: success() && steps.findPr.outputs.number
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PR: ${{ steps.findPr.outputs.pr }}
        run: |
          pushd solution/static-assets
          npm install serverless -g
          npm install
          serverless deploy --stage dev-${PR}
          popd
  deploy-django:
    environment:
      name: "dev"
    outputs:
      url: ${{ steps.deploy-regulations-site-server.outputs.url }}
    runs-on: ubuntu-latest
    needs: deploy-static
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      # Find the PR number.  This is not always trivial which is why this uses an existign action
      - name: Find PR number
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          # Can be "open", "closed", or "all".  Defaults to "open".
          state: open

      # should build first and save the artifact
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      # setup python
      - uses: actions/setup-python@v2
        if: success() && steps.findPr.outputs.number
        with:
          python-version: '3.8'
      # Deploy the regulation site to AWS
      - name: deploy regulations site server
        id: deploy-regulations-site-server
        if: success() && steps.findPr.outputs.number
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PR: ${{ steps.findPr.outputs.pr }}
        run: |
          pushd solution/backend
          npm install serverless -g
          npm install
          serverless deploy --config ./serverless-experimental.yml --stage dev-${PR} | tee output.log
          serverless invoke --config ./serverless-experimental.yml --function reg_core_migrate --stage dev-${PR}
          serverless invoke --config ./serverless-experimental.yml --function create_su --stage dev-${PR}
          serverless invoke --config ./serverless-experimental.yml --function populate_content --stage dev-${PR}
          echo "::set-output name=url::$(cat output.log | grep -m1 'ANY -' | cut -c 9-)"
          popd

  deploy-prototype:
    runs-on: ubuntu-latest
    needs: deploy-django
    outputs:
      url: ${{ steps.build-static-assets-and-deploy-prototype.outputs.url }}
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      # Find the PR number.  This is not always trivial which is why this uses an existign action
      - name: Find PR number
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          # Can be "open", "closed", or "all".  Defaults to "open".
          state: open

      # should build first and save the artifact
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      # build the static assets for the website
      - name: build static assets and deploy prototype
        id: build-static-assets-and-deploy-prototype
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PR: ${{ steps.findPr.outputs.pr }}
          VUE_APP_API_URL: ${{ steps.deploy-regulations-site-server.outputs.url }}
        run: |
          pushd solution/ui/prototype
          npm ci
          npm install serverless -g
          npm run build
          serverless deploy --stage dev-${PR}
          echo "::set-output name=url::$(serverless info --stage dev-${PR} --verbose | grep StaticURL | cut -c 12-)"
          popd

  deploy-go:
    environment:
      name: "dev"
      url: ${{ steps.deploy-regulations-site-server.outputs.url }}
    runs-on: ubuntu-latest
    needs: deploy-django
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      # Find the PR number.  This is not always trivial which is why this uses an existign action
      - name: Find PR number
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          # Can be "open", "closed", or "all".  Defaults to "open".
          state: open
      # Setup GO
      - name: Setup Go
        if: success() && steps.findPr.outputs.number
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16' # The Go version to download (if necessary) and use.
      # deploy and run eCFR parser
      - name: deploy and run eCFR parser
        id: deploy-run-ecfr-parser
        timeout-minutes: 20
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PR: ${{ steps.findPr.outputs.pr }}
        run: |
          pushd solution/parser
          npm install serverless -g
          npm install
          serverless deploy --stage dev-${PR} --config ./serverless-ecfr.yml
          AWS_CLIENT_TIMEOUT=360000 serverless invoke --function ecfr_parser --stage dev-${PR} --config ./serverless-ecfr.yml
          popd
      # deploy and run Federal Register parser
      - name: deploy and run FR parser
        id: deploy-run-fr-parser
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PR: ${{ steps.findPr.outputs.pr }}
        run: |
          pushd solution/parser
          npm install serverless -g
          npm install
          serverless deploy --stage dev-${PR} --config ./serverless-fr.yml
          AWS_CLIENT_TIMEOUT=360000 serverless invoke --function fr_parser --stage dev-${PR} --config ./serverless-fr.yml
          popd
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-go, deploy-django, deploy-prototype]
    steps:
      - name: Find PR number
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          # Can be "open", "closed", or "all".  Defaults to "open".
          state: open
      - name: set-variables
        run: |
          echo "::set-output name=django_url::${{ needs.deploy-django.outputs.url }}"
          echo "::set-output name=prototype_url::${{ needs.deploy-prototype.outputs.url }}"

      # Notify github that this is deployed and ready to look at
      - name: Create django comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ steps.findPr.outputs.pr }}
          body: |
            :sparkles: See the Django Site [in action][1] :sparkles:
            
            [1]: ${{ steps.set-variables.django_url }}
          reactions: '+1'
      # Notify github that this is deployed and ready to look at
      - name: Create prototype comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ steps.findPr.outputs.pr }}
          body: |
            :sparkles: See this Prototype Site [in action][1] :sparkles:
            
            [1]: ${{ steps.set-variables.prototype_url }}
          reactions: '+1'
  test-cypress:
    needs: [deploy-go, deploy-django]
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      # Run the cypress tests
      - name: end-to-end tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: solution/ui/e2e
          config: baseUrl=${{ needs.deploy-django.outputs.url }}
        env:
          CYPRESS_DEPLOYING: true
