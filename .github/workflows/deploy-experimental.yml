name: "Deploy Experimental"

on:
  pull_request:
    types: [opened, synchronize, reopened]


jobs:
  deploy:
    environment:
      name: "dev"
      url: ${{ steps.deploy-regulations-site-server.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Find PR number
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          # Can be "open", "closed", or "all".  Defaults to "open".
          state: open
      # This will echo "Your PR is 7", or be skipped if there is no current PR.
      - name: Echo PR#
        env:
          PR: ${{ steps.findPr.outputs.pr }}
        run: |
          curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"body":"See this pull request in action: ${{ steps.findPr.outputs.pr }}"}' \
            -X POST "https://api.github.com/repos/CMSgov/cmcs-eregulations/issues/${PR}/comments"
      - name: Create comment
        env:
          PR: ${{ steps.findPr.outputs.pr }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: 285
          body: |
            This is a multi-line test comment
            ${PR}
            - With GitHub **Markdown** :sparkles:
            - Created by [create-or-update-comment][1]

            [1]: https://github.com/peter-evans/create-or-update-comment
          reactions: '+1'

      # should build first and save the artifact
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '15.11.0'
      - name: build static assets
        run: |
          make regulations
          cp -r regulations/static/regulations serverless/static-assets/static
          rm -r regulations/static/node_modules
      - uses: actions/setup-node@v1
        if: success() && steps.findPr.outputs.number
        with:
          node-version: '12.x'
      - uses: actions/setup-python@v2
        if: success() && steps.findPr.outputs.number
        with:
          python-version: '3.8'
      - name: deploy static assets
        if: success() && steps.findPr.outputs.number
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PR: ${{ steps.findPr.outputs.pr }}
        run: |
          pushd serverless/static-assets/serverless
          npm install serverless -g
          npm install
          serverless deploy --stage dev-${PR}
          popd
      - name: deploy regulations site server
        id: deploy-regulations-site-server
        if: success() && steps.findPr.outputs.number
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PR: ${{ steps.findPr.outputs.pr }}
        run: |
          pushd serverless
          npm install serverless -g
          npm install
          serverless deploy --config ./serverless-experimental.yml --stage dev-${PR} | tee output.log
          serverless invoke --config ./serverless-experimental.yml --function reg_core_migrate --stage dev-${PR}
          serverless invoke --config ./serverless-experimental.yml --function create_su --stage dev-${PR}
          serverless invoke --config ./serverless-experimental.yml --function populate_content --stage dev-${PR}
          echo "::set-output name=url::$(cat output.log | grep -m1 'ANY -' | cut -c 9-)"
          popd
      - name: Setup Go
        if: success() && steps.findPr.outputs.number
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16' # The Go version to download (if necessary) and use.
      - name: deploy and run eCFR parser
        id: deploy-run-ecfr-parser
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PR: ${{ steps.findPr.outputs.pr }}
        run: |
          pushd serverless
          npm install serverless -g
          npm install
          serverless deploy --config ./serverless-parser.yml --stage dev-${PR}
          AWS_CLIENT_TIMEOUT=360000 serverless invoke --config ./serverless-parser.yml --function ecfr_parser --stage dev-${PR}
          popd
      - name: end-to-end tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: e2e
          config: baseUrl=${{ steps.deploy-regulations-site-server.outputs.url }}
        env:
          CYPRESS_DEPLOYING: true
      - name: Create or Update Comment
        env:
          PR: ${{ steps.findPr.outputs.pr }}
        if: success() && steps.findPr.outputs.number && steps.deploy-regulations-site-server.outputs.url
        run: |
          curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"body":"See this pull request in action: ${{steps.deploy-regulations-site-server.outputs.url}}"}' \
            -X POST "https://api.github.com/repos/CMSgov/cmcs-eregulations/issues/${PR}/comments"