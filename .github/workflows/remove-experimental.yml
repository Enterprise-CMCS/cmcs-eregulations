name: "Remove Experimental"

on:
  workflow_dispatch:
  pull_request:
    types: [ closed ]

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  remove:
    environment:
      name: "dev"
    runs-on: ubuntu-20.04
    steps:
      # gettign PR is trivial here because the only tirgger is closing a PR
      - name: Echo PR#
        env:
          PR: ${{ github.event.number }}
        run: echo "Your PR is ${PR}"
      # Checkout the code
      - uses: actions/checkout@v3
        with:
          submodules: true
      # Setup Node
      - uses: actions/setup-node@v3
        with:
          node-version: 18.14
      # Setup Python
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      # Configure AWS credentials for GitHub Actions
      - name: Configure AWS credentials for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      # Remove parsers
      - name: remove parsers
        env:
          PR: ${{ github.event.number }}
        run: |
          echo 'within run now running pwd'
          echo `pwd`
          pushd solution/parser
          npm install serverless -g
          npm install

          STACK_NAME="cmcs-eregs-parser-dev${PR}"
 
          # Function to get the stack status
          get_stack_status() {
            aws cloudformation describe-stacks --stack-name "${STACK_NAME}" --query 'Stacks[0].StackStatus' --output text 2> /dev/null
          }
 
          # Check if the stack exists
          STACK_EXISTS=$(get_stack_status)
 
          while [[ "${STACK_EXISTS}" == "CREATE_IN_PROGRESS" || "${STACK_EXISTS}" == "UPDATE_IN_PROGRESS" || "${STACK_EXISTS}" == "DELETE_IN_PROGRESS" ]]; do
            echo "Waiting for the stack '${STACK_NAME}' to finish its ongoing operation..."
            sleep 10
            STACK_EXISTS=$(get_stack_status)
          done
 
          if [ -z "${STACK_EXISTS}" ]; then
            echo "Stack '${STACK_NAME}' does not exist. Nothing to delete."
          else
            # Stack exists and is not in an "in progress" state, delete the stack
            echo "Deleting the stack '${STACK_NAME}'..."
            serverless remove --stage dev${PR} --config ./serverless-ecfr.yml 
            aws cloudformation wait stack-delete-complete --stack-name "${STACK_NAME}"
            echo "Stack '${STACK_NAME}' deleted successfully."
          fi
          #chmod +x ~/work/cmcs-eregulations/cmcs-eregulations/.github/workflows/delete_cloudformation_stacks.sh 
          #~/work/cmcs-eregulations/cmcs-eregulations/.github/workflows/delete_cloudformation_stacks.sh cmcs-eregs-parser-dev${PR} $PR "./serverless-ecfr.yml"
          #~/work/cmcs-eregulations/cmcs-eregulations/.github/workflows/delete_cloudformation_stacks.sh cmcs-eregs-fr-parser-dev${PR}, $PR "./serverless-fr.yml"
          serverless remove --stage dev${PR} --config ./serverless-fr.yml

          popd
      # remove the regulations site
      - name: remove experimental regulations site server
      # If previous step fails the database will not be removed and you cannot rerun it
      # In this instance we want to just remove the database so that we dont have
      # to go into the database and do it manually.
      # If process is manually stopped it will not run this step.
        if: success() || failure()
        env:
          PR: ${{ github.event.number }}
        run: |
          pushd solution/backend
          npm install serverless -g
          npm install
          serverless invoke --config ./serverless-experimental.yml --function drop_database --stage dev${PR}
          serverless remove --config ./serverless-experimental.yml --stage dev${PR}
          popd
      # Remove the static assets
      - name: remove static assets
        env:
          PR: ${{ github.event.number }}
        run: |
          pushd solution/static-assets
          npm install serverless -g
          npm install
          serverless remove --stage dev${PR}
          popd
