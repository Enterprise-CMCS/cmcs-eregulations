name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    strategy:
      max-parallel: 1
      matrix:
        environment: ["dev", "val", "prod"]
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy-regulations-site-server.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      # should build first and save the artifact
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./solution/backend/requirements.txt

      - name: build static assets
        env:
          STATIC_ROOT: ../static-assets/regulations
          # This isn't at all accurate, but it doesn't matter; Django just needs it to run collectstatic
          STATIC_URL: http://localhost:8888/
        run: |
          pushd solution
          make regulations
          cd backend
          python manage.py collectstatic --noinput
          cd ..
          popd
      - name: deploy static assets
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          pushd solution/static-assets
          npm install serverless -g
          npm install
          serverless deploy --stage ${{ matrix.environment }}
          popd
      - name: deploy regulations site server
        id: deploy-regulations-site-server
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          pushd solution/backend
          npm install serverless -g
          npm install
          serverless deploy --stage ${{ matrix.environment }} | tee output.log
          serverless invoke --function reg_core_migrate --stage ${{ matrix.environment }}
          serverless invoke --function create_su --stage ${{ matrix.environment }}
          echo "::set-output name=url::$(cat output.log | grep -m1 'ANY -' | cut -c 9-)"
          popd
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16' # The Go version to download (if necessary) and use.
      - name: deploy and run eCFR parser
        id: deploy-run-ecfr-parser
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          pushd solution/parser
          npm install serverless -g
          npm install
          serverless deploy --stage dev-${PR}
          AWS_CLIENT_TIMEOUT=360000 serverless invoke --function ecfr_parser --stage dev-${PR}
          popd
      - name: end-to-end tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: solution/ui/e2e
          config: baseUrl=${{ steps.deploy-regulations-site-server.outputs.url }}
        env:
          CYPRESS_DEPLOYING: true
