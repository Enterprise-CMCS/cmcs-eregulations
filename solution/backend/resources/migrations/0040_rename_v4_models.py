# Generated by Django 5.0.4 on 2024-05-31 15:29
#
# Modified by Caleb Godwin to enable renaming base classes, as this feature is not natively supported by Django at this time.
# See https://github.com/django/django/pull/17986 for the PR referencing this issue.
# See https://stackoverflow.com/a/61723620 for information on how this workaround works.
#
# Essentially, we are temporarily modifying the child classes to have a base class of just "models.Model", which permits
# us to rename the OneToOne pointer fields without causing Django's migration framework to detect a clash.
#
# This base class modification is only "active" during the migration, and does not permanently alter the inheritance tree.


from django.db import migrations, models
from django.db.migrations.operations.models import ModelOperation


# This ModelOperation performs the temporary modification to a model's base class.
class AlterModelBases(ModelOperation):
    reduce_to_sql = False
    reversible = True

    def __init__(self, name, bases):
        self.bases = bases
        super().__init__(name)

    def state_forwards(self, app_label, state):
        """
        Overwrite a models base classes with a custom list of
        bases instead, then force Django to reload the model
        with this different class hierarchy.
        """
        state.models[app_label, self.name_lower].bases = self.bases
        state.reload_model(app_label, self.name_lower)

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        pass

    def database_backwards(self, app_label, schema_editor, from_state, to_state):
        pass

    def describe(self):
        return "Update %s bases to %s" % (self.name, self.bases)


class Migration(migrations.Migration):

    dependencies = [
        ('content_search', '0011_remove_v3_dependencies'),
        ('resources', '0039_remove_old_pk_fields'),
        ('file_manager', '0019_remove_all_models'),
    ]

    operations = [
        # Step 1: Rename the pointer fields to reflect the new naming scheme.
        migrations.RenameField(
            model_name='abstractinternalcategory',
            old_name='newabstractcategory_ptr',
            new_name='abstractcategory_ptr',
        ),
        migrations.RenameField(
            model_name='abstractinternalresource',
            old_name='newabstractresource_ptr',
            new_name='abstractresource_ptr',
        ),
        migrations.RenameField(
            model_name='abstractpubliccategory',
            old_name='newabstractcategory_ptr',
            new_name='abstractcategory_ptr',
        ),
        migrations.RenameField(
            model_name='abstractpublicresource',
            old_name='newabstractresource_ptr',
            new_name='abstractresource_ptr',
        ),
        migrations.RenameField(
            model_name='resourcegroup',
            old_name='newabstractresource_ptr',
            new_name='abstractresource_ptr',
        ),
        # Step 2: Alter the child model's bases (in memory only) to trick Django into thinking it's a non-inherited model.
        AlterModelBases("AbstractInternalCategory", (models.Model,)),
        AlterModelBases("AbstractInternalResource", (models.Model,)),
        AlterModelBases("AbstractPublicCategory", (models.Model,)),
        AlterModelBases("AbstractPublicResource", (models.Model,)),
        AlterModelBases("ResourceGroup", (models.Model,)),
        # Step 3: Rename the base models.
        migrations.RenameModel(
            old_name='NewAbstractCategory',
            new_name='AbstractCategory',
        ),
        migrations.RenameModel(
            old_name='NewAbstractResource',
            new_name='AbstractResource',
        ),
        migrations.RenameModel(
            old_name='NewResourcesConfiguration',
            new_name='ResourcesConfiguration',
        ),
        migrations.RenameModel(
            old_name='NewSection',
            new_name='Section',
        ),
        migrations.RenameModel(
            old_name='NewSubject',
            new_name='Subject',
        ),
        migrations.RenameModel(
            old_name='NewSubpart',
            new_name='Subpart',
        ),
        # Step 4: Tell Django what the new pointer fields should be.
        migrations.AlterField(
            model_name='abstractinternalcategory',
            name='abstractcategory_ptr',
            field=models.OneToOneField(
                auto_created=True,
                on_delete=models.deletion.CASCADE,
                parent_link=True, primary_key=True,
                serialize=False,
                to='resources.AbstractCategory',
            ),
        ),
        migrations.AlterField(
            model_name='abstractinternalresource',
            name='abstractresource_ptr',
            field=models.OneToOneField(
                auto_created=True,
                on_delete=models.deletion.CASCADE,
                parent_link=True, primary_key=True,
                serialize=False,
                to='resources.AbstractResource',
            ),
        ),
        migrations.AlterField(
            model_name='abstractpubliccategory',
            name='abstractcategory_ptr',
            field=models.OneToOneField(
                auto_created=True,
                on_delete=models.deletion.CASCADE,
                parent_link=True, primary_key=True,
                serialize=False,
                to='resources.AbstractCategory',
            ),
        ),
        migrations.AlterField(
            model_name='abstractpublicresource',
            name='abstractresource_ptr',
            field=models.OneToOneField(
                auto_created=True,
                on_delete=models.deletion.CASCADE,
                parent_link=True, primary_key=True,
                serialize=False,
                to='resources.AbstractResource',
            ),
        ),
        migrations.AlterField(
            model_name='resourcegroup',
            name='abstractresource_ptr',
            field=models.OneToOneField(
                auto_created=True,
                on_delete=models.deletion.CASCADE,
                parent_link=True, primary_key=True,
                serialize=False,
                to='resources.AbstractResource',
            ),
        ),
    ]
