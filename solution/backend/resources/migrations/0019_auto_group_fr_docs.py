# Generated by Django 3.2.13 on 2022-07-07 16:53

from django.db import migrations


def combine_groups(groups):
    main = groups[0]
    docs = main.documents.all()
    prefixes = main.docket_number_prefixes
    for group in groups[1:]:
        docs |= group.documents.all()
        prefixes += group.docket_number_prefixes
        group.delete()
    main.documents.set(docs.distinct())
    main.docket_number_prefixes = list(set(prefixes))
    main.save()
    return main


def group_existing_fr_docs(apps, schema_editor):
    FederalRegisterDocument = apps.get_model("resources", "FederalRegisterDocument")
    FederalRegisterDocumentGroup = apps.get_model("resources", "FederalRegisterDocumentGroup")
    for doc in FederalRegisterDocument.objects.all().order_by("date").filter(docket_numbers__isnull=False):
        # compute prefixes
        prefixes = []
        for i in doc.docket_numbers:
            d = i.split("-")
            if len(d) > 1: # check for invalid docket numbers (no dashes)
                prefixes.append("-".join(d[0:-1]) + "-")
        if len(prefixes) == 0:
            continue # skip auto-grouping docs with no valid docket numbers
        # get or create group
        groups = FederalRegisterDocumentGroup.objects.filter(docket_number_prefixes__overlap=prefixes)
        if len(groups) == 0:
            group = FederalRegisterDocumentGroup.objects.create(docket_number_prefixes=prefixes)
        else:
            group = combine_groups(groups) if len(groups) > 1 else groups[0]
        # update group prefixes list
        group.docket_number_prefixes = list(set(group.docket_number_prefixes + prefixes))
        group.save()
        # assign this doc to the group
        doc.group = group
        doc.save()


class Migration(migrations.Migration):

    dependencies = [
        ('resources', '0018_separate_docket_create_group'),
    ]

    operations = [
        migrations.RunPython(group_existing_fr_docs),
    ]
