# Generated by Django 5.2.6 on 2025-09-24 14:49

import django.core.validators
import django_jsonform.models.fields
from django.db import migrations, models


def create_content_search_configuration(apps, schema_editor):
    ContentSearchConfiguration = apps.get_model('content_search', 'ContentSearchConfiguration')
    if apps.is_installed("resources"):
        ResourcesConfiguration = apps.get_model('resources', 'ResourcesConfiguration')
        resources_config = ResourcesConfiguration.objects.first()
        if resources_config:
            ContentSearchConfiguration.objects.create(
                auto_extract=resources_config.auto_extract,
                extraction_delay_time=resources_config.extraction_delay_time,
                robots_txt_allow_list=resources_config.robots_txt_allow_list,
                user_agent_override_list=resources_config.user_agent_override_list,
                default_user_agent_override=resources_config.default_user_agent_override,
            )
    else:
        ContentSearchConfiguration.objects.create()


class Migration(migrations.Migration):

    dependencies = [
        ('content_search', '0009_alter_contentindex_reg_text_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentSearchConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_extract', models.BooleanField(default=False, help_text='Check this box if eRegs should automatically request text extraction on any resource when it is originally saved/created or when its source is changed: URL (for public and internal links), document number (for FR links), or attached file (for internal files).', verbose_name='Auto Extract')),
                ('extraction_delay_time', models.IntegerField(blank=True, default=180, help_text='The number of seconds to delay between multiple text extraction requests. This is useful to prevent overloading external services with too many requests in a short period of time.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Extraction Delay Time')),
                ('robots_txt_allow_list', django_jsonform.models.fields.JSONField(blank=True, default=list, help_text="A list of URLs and/or domains that the text extractor should be allowed to access, even if eRegs is not in their robots.txt file. For example, 'example.com' will allow the entire domain and all subdomains to be accessed, while 'https://example.com/page.html' will allow only that specific page.", verbose_name='Robots.txt Allow List')),
                ('user_agent_override_list', django_jsonform.models.fields.JSONField(blank=True, default=list, help_text="A list of domains and user agents that the text extractor should use instead of the default user agent. This is useful for sites that block eRegs' default user agent. Note that a domain will match all subdomains.", verbose_name='User Agent Override List')),
                ('default_user_agent_override', models.CharField(blank=True, default='Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:140.0) Gecko/20100101 Firefox/140.0', help_text="A default user agent to use for all requests to domains in the user agent override list that do not specify a user agent. This is useful for sites that block eRegs' default user agent.", max_length=255, verbose_name='Default User Agent Override')),
            ],
            options={
                'verbose_name': 'Content Search Configuration',
            },
        ),
        migrations.RunPython(create_content_search_configuration),
    ]
