# Generated by Django 5.0.7 on 2024-08-23 13:11

import logging

from django.db import migrations, models

logger = logging.getLogger(__name__)

TIMEOUT_MINUTES = 10


def copy_indexed_regulation_text(apps, schema_editor):
    # Lessen the likelihood of this migration timing out during the copy operation
    schema_editor.execute(f"SET LOCAL statement_timeout TO {TIMEOUT_MINUTES * 60000};")

    if not apps.is_installed("search"):
        logger.warning("Skipping copy_indexed_regulation_text data migration because 'search' app is no longer installed.")
        return
    
    try:
        SearchIndexV2 = apps.get_model("search", "SearchIndexV2")
    except LookupError:
        logger.warning("Skipping copy_indexed_regulation_text data migration because 'SearchIndexV2' model is not found.")
        return

    if not apps.is_installed("regcore"):
        logger.warning("Skipping copy_indexed_regulation_text data migration because 'regcore' app is no longer installed.")
        return

    try:
        Part = apps.get_model("regcore", "Part")
    except LookupError:
        logger.warning("Skipping copy_indexed_regulation_text data migration because 'Part' model is not found.")
        return

    ContentIndex = apps.get_model("content_search", "ContentIndex")
    IndexedRegulationText = apps.get_model("content_search", "IndexedRegulationText")

    latest_parts = Part.objects.order_by("title", "name", "-date").distinct("title", "name")
    old_indexes = SearchIndexV2.objects.filter(part__in=latest_parts)
    new_indexes = [ContentIndex(
        name=i.section_title,
        content=i.content,
        reg_text=IndexedRegulationText(
            part=i.part,
            title=i.part.title,
            date=i.part.date,
            part_title=i.part_title,
            part_number=i.part_number,
            node_type="appendix" if "appendix" in i.section_title.lower() else "section",
            node_id=i.section_number,
            node_title=i.section_title,
        ),
        rank_a_string=f"{i.section_number} {i.section_title}",
        rank_b_string=f"{i.part_title}",
        rank_c_string=f"{i.content}",
        rank_d_string="",
    ) for i in old_indexes]

    ContentIndex.objects.bulk_create(new_indexes, ignore_conflicts=True)


class Migration(migrations.Migration):

    dependencies = [
        ('content_search', '0002_alter_contentindex_options'),
    ]

    operations = [
        migrations.RenameField(
            model_name='indexedregulationtext',
            old_name='parent',
            new_name='part',
        ),
        migrations.AddField(
            model_name='indexedregulationtext',
            name='date',
            field=models.DateField(blank=True, null=True, default=None),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='indexedregulationtext',
            name='node_id',
            field=models.CharField(blank=True, max_length=32),
        ),
        migrations.AddField(
            model_name='indexedregulationtext',
            name='node_title',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='indexedregulationtext',
            name='node_type',
            field=models.CharField(blank=True, max_length=32),
        ),
        migrations.AddField(
            model_name='indexedregulationtext',
            name='part_number',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='indexedregulationtext',
            name='part_title',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='indexedregulationtext',
            name='title',
            field=models.IntegerField(default=0),
        ),
        #migrations.RunPython(copy_indexed_regulation_text, reverse_code=migrations.RunPython.noop),
    ]
