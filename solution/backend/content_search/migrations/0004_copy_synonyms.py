# Generated by Django 5.0.7 on 2024-08-26 15:03
# Modified by Caleb Godwin to copy the Synonym data from regcore-search to content_search

import logging
from django.db import migrations, models

logger = logging.getLogger(__name__)

TIMEOUT_MINUTES = 10


def copy_synonyms(apps, schema_editor):
    # Lessen the likelihood of this migration timing out during the copy operation
    schema_editor.execute(f"SET LOCAL statement_timeout TO {TIMEOUT_MINUTES * 60000};")

    if not apps.is_installed("search"):
        logger.warning("Skipping copy_synonyms data migration because 'search' app is no longer installed.")
        return
    
    try:
        OldSynonym = apps.get_model("search", "Synonym")
    except LookupError:
        logger.warning("Skipping copy_synonyms data migration because 'Synonym' model is not found.")
        return

    NewSynonym = apps.get_model("content_search", "Synonym")

    new = NewSynonym.objects.bulk_create([NewSynonym(
        is_active=i.isActive,
        base_word=i.baseWord,
    ) for i in OldSynonym.objects.all()])

    for i in OldSynonym.objects.all():
        new = NewSynonym.objects.create(
            is_active=i.isActive,
            base_word=i.baseWord,
        )
        new.synonyms.set(NewSynonym.objects.filter(base_word__in=i.synonyms.values_list("baseWord", flat=True)))
        new.save()


class Migration(migrations.Migration):

    dependencies = [
        ('content_search', '0003_copy_regtext_indices'),
    ]

    operations = [
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('base_word', models.CharField(max_length=128)),
                ('synonyms', models.ManyToManyField(blank=True, to='content_search.synonym')),
            ],
        ),
        migrations.RunPython(copy_synonyms, reverse_code=migrations.RunPython.noop),
    ]
