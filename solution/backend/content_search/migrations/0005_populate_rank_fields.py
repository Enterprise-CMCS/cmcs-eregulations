

from django.db import migrations

# Generated by Django 3.2.22 on 2023-11-14 07:44

from django.db import migrations
def get_subject_string(subjects):
    if subjects:
        return ' '.join([f'{subject.full_name} '
                f'{subject.short_name if subject.short_name else ""} '
                f'{subject.abbreviation if subject.abbreviation else  ""}' for subject in subjects])
    else:
        return ''

def populate_search_fields(apps, schema_editor):
    index_model = apps.get_model("content_search", "ContentIndex")
    supplemental = apps.get_model("resources", "SupplementalContent")
    federal = apps.get_model("resources", "FederalRegisterDocument")
    files = apps.get_model("file_manager", "UploadedFile")

    sup_content = supplemental.objects.filter(approved=True)
    fr_docs = federal.objects.filter(approved=True)
    uploaded_files = files.objects.all()

    for sup in sup_content:
        index = index_model.objects.get(supplemental_content=sup)
        index.rank_a_string=f"{sup.name if sup.name else ''} {sup.description if sup.description else ''}",
        index.rank_b_string='',
        index.rank_c_string=f"{sup.date if sup.date else ''}"
        index.rank_d_string = get_subject_string(sup.subjects.all())
        index.save()

    for doc in fr_docs:
        index = index_model.objects.get(fr_doc=doc)
        index.rank_a_string=f"{doc.name if doc.name else ''} {doc.description if doc.description else ''}",
        index.rank_b_string='',
        index.rank_c_string=f"{doc.date if doc.date else ''}"
        index.rank_d_string = get_subject_string(doc.subjects.all())
        index.save()

    for up in uploaded_files:
        index = index_model.objects.get(file=up)
        index.rank_a_string=f"{up.document_name if up.document_name else ''}",
        index.rank_b_string=f"{up.summary if up.summary else ''}",
        index.rank_c_string=f"{up.date if up.date else ''} {up.file_name if up.file_name else ''}",
        index.rank_d_string = get_subject_string(up.subjects.all())
        index.save()

class Migration(migrations.Migration):

    dependencies = [
        ('content_search', '0004_auto_20231129_1427'),
    ]

    operations = [
        migrations.RunSQL(
            sql='''
                ALTER TABLE content_search_contentindex DROP COLUMN vector_column;
            ''',
        ),
        migrations.RunPython(populate_search_fields),
        migrations.RunSQL(
            sql='''
              ALTER TABLE content_search_contentindex ADD COLUMN vector_column tsvector GENERATED ALWAYS AS (
                setweight(to_tsvector('english', coalesce(rank_a_string, '')), 'A') ||
                setweight(to_tsvector('english', coalesce(rank_b_string,'')), 'B') ||
                setweight(to_tsvector('english', coalesce(rank_c_string,'')), 'C') ||
                setweight(to_tsvector('english', coalesce(rank_d_string,'')), 'D') ||
                setweight(to_tsvector('english', coalesce(content,'')), 'D')
              ) STORED;
              CREATE INDEX content_search_index_vec ON content_search_contentindex USING GIN (vector_column);
            ''',

            reverse_sql = '''
              ALTER TABLE content_search_contentindex DROP COLUMN vector_column;
            '''
        ),
    ]
