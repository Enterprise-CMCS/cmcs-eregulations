# Generated by Django 5.2.5 on 2025-09-30 10:34

from django.db import migrations, models


def find_subpart(section, node, subpart_id=None, subpart_title=None):
    value_id = None
    value_text = None
    if node['node_type'] == 'SECTION' and node['label'][1] == section:
        if subpart_id is None:
            raise Exception("NotInSubpart")
        return subpart_id, subpart_title
    elif node['node_type'] == 'SUBPART' and node.get('children'):
        for child in node['children']:
            value_id, value_text = find_subpart(section, child, node['label'][0], node['title'])
            if value_id is not None and value_text is not None:
                break
    elif node.get('children'):
        for child in node['children']:
            value_id, value_text = find_subpart(section, child, subpart_id, subpart_title)
            if value_id is not None and value_text is not None:
                break
    return value_id, value_text

def populate_subpart_fields(apps, schema_editor):
    IndexedRegulationText = apps.get_model('content_search', 'IndexedRegulationText')
    for item in IndexedRegulationText.objects.all():
        try:
            node_id = item.node_id
            document = item.part.document
            subpart_id, subpart_title = find_subpart(node_id, document)
            item.subpart_id = subpart_id or ""
            item.subpart_title = subpart_title or ""
            item.save()
        except Exception:
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('content_search', '0008_contentindex_embedding'),
    ]

    operations = [
        migrations.AddField(
            model_name='indexedregulationtext',
            name='subpart_id',
            field=models.CharField(blank=True, max_length=8),
        ),
        migrations.AddField(
            model_name='indexedregulationtext',
            name='subpart_title',
            field=models.TextField(blank=True),
        ),
        migrations.RunPython(populate_subpart_fields, reverse_code=migrations.RunPython.noop),
    ]
