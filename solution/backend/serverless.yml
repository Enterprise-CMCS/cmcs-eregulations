service: cmcs-eregs-site
variablesResolutionMode: 20210326

provider:
  name: aws
  memorySize: 4096
  runtime: python3.12
  region: us-east-1
  iam:
    role: LambdaFunctionRole
  logs:
    restApi:
      level: INFO
      roleManagedExternally: true
  lambdaHashingVersion: '20201221'
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'application/pdf'
  environment:
    DB_NAME: ${self:custom.settings.DB_NAME}
    DB_USER: ${self:custom.settings.USERNAME}
    Test_config: 'test'
    DB_PASSWORD: ${ssm:/eregulations/db/password}
    DB_HOST: ${ssm:/eregulations/db/host}
    DB_PORT: ${ssm:/eregulations/db/port}
    GA_ID: ${ssm:/eregulations/http/google_analytics}
    HTTP_AUTH_USER: ${ssm:/eregulations/http/user}
    HTTP_AUTH_PASSWORD: ${ssm:/eregulations/http/password}
    DJANGO_USERNAME: ${ssm:/eregulations/http/reader_user}
    DJANGO_PASSWORD: ${ssm:/eregulations/http/reader_password}
    DJANGO_ADMIN_USERNAME: ${ssm:/eregulations/http/user}
    DJANGO_ADMIN_PASSWORD: ${ssm:/eregulations/http/password}
    DJANGO_SETTINGS_MODULE: ${ssm:/eregulations/django_settings_module}
    ALLOWED_HOST: '.amazonaws.com'
    STAGE_ENV: ${self:custom.stage}
    STATIC_URL: ${self:custom.settings.static_url}
    BASE_URL: ${ssm:/eregulations/base_url}
    CUSTOM_URL: ${ssm:/eregulations/custom_url}
    SURVEY_URL: ${ssm:/eregulations/survey_url}
    SIGNUP_URL: ${ssm:/eregulations/signup_url}
    DEMO_VIDEO_URL: ${ssm:/eregulations/demo_video_url}
    OIDC_RP_CLIENT_ID:  ${ssm:/eregulations/oidc/client_id}
    OIDC_RP_CLIENT_SECRET: ${ssm:/eregulations/oidc/client_secret}
    OIDC_OP_AUTHORIZATION_ENDPOINT: ${ssm:/eregulations/oidc/authorization_endpoint}
    OIDC_OP_TOKEN_ENDPOINT: ${ssm:/eregulations/oidc/token_endpoint}
    OIDC_OP_JWKS_ENDPOINT: ${ssm:/eregulations/oidc/jwks_endpoint}
    OIDC_OP_USER_ENDPOINT: ${ssm:/eregulations/oidc/user_endpoint}
    OIDC_END_EUA_SESSION: ${ssm:/eregulations/oidc/end_eua_session}
    BASIC_SEARCH_FILTER: ${ssm:/eregulations/basic_search_filter}
    QUOTED_SEARCH_FILTER: ${ssm:/eregulations/quoted_search_filter}
    SEARCH_HEADLINE_TEXT_MAX: ${ssm:/eregulations/search_headline_text_max}
    SEARCH_HEADLINE_MIN_WORDS: ${ssm:/eregulations/search_headline_min_words}
    SEARCH_HEADLINE_MAX_WORDS: ${ssm:/eregulations/search_headline_max_words}
    SEARCH_HEADLINE_MAX_FRAGMENTS: ${ssm:/eregulations/search_headline_max_fragments}
    EUA_FEATUREFLAG: ${ssm:/eregulations/eua/featureflag}
    DEPLOY_NUMBER: ${env:RUN_ID}
    AWS_STORAGE_BUCKET_NAME: file-repo-eregs-${self:custom.stage}
    TEXT_EXTRACTOR_QUEUE_URL: ${self:custom.settings.text_extractor_queue_url}
  tracing:
    apiGateway: true
  vpc:
    securityGroupIds:
      - !Ref ServerlessSecurityGroup
    subnetIds:
      - ${ssm:/account_vars/vpc/subnets/private/a/id}
      - ${ssm:/account_vars/vpc/subnets/private/b/id}
  deploymentBucket:
    blockPublicAccess: true
package:
  individually: false
  exclude:
    - node_modules/**
    - nginx/**

custom:
  stage: ${opt:stage, self:provider.stage}
  wsgi:
    app: handler.application
    packRequirements: false
  settings:
    static_url: ${cf:cmcs-eregs-static-assets-${self:custom.stage}.StaticURL}/
    DB_NAME: eregs
    USERNAME: eregsuser
    ALLOWED_HOST: '.amazonaws.com'
    text_extractor_queue_url: ${cf:text-extractor-${self:custom.stage}.TextExtractorQueueUrl}
    text_extractor_queue_arn: ${cf:text-extractor-${self:custom.stage}.TextExtractorQueueArn}
  associateWaf:
    name: APIGateway-eregs-allow-usa-plus-territories-${self:custom.stage}
    version: V2

functions: ${file(serverless_functions/${self:custom.stage}_functions.yml)}


resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.WWW-Authenticate: "'Basic'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: file-repo-eregs-${self:custom.stage}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000
    WAFRegionalWebACL: ${file(aws_resources/waf.yml):WAFRegionalWebACL}
    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${ssm:/account_vars/iam/path}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        PermissionsBoundary:
          Fn::Join:
            - ''
            - - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - ${ssm:/account_vars/iam/permissions_boundary_policy}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: SendToTextExtractorQueuePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource: "${self:custom.settings.text_extractor_queue_arn}"
          - PolicyName: StorageBucketPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Deny
                  Action: "*"
                  Condition:
                    Bool:
                      "aws:SecureTransport": false
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref" : "ServerlessDeploymentBucket"
                    - "arn:aws:s3:::file-repo-eregs-${self:custom.stage}/*"
          - PolicyName: LambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                     - "s3:GetObject"
                     - "s3:DeleteObject"
                   Resource:
                     - Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"
                     - "arn:aws:s3:::file-repo-eregs-${self:custom.stage}/*"
    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId: ${ssm:/account_vars/vpc/id}
        Tags:
          - Key: "Name"
            Value: "ServerlessSecurityGroup"

    DBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Database
        VpcId: ${ssm:/account_vars/vpc/id}
        Tags:
          - Key: "Name"
            Value: "DBSecurityGroup"

    DBSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref 'DBSecurityGroup'
        IpProtocol: tcp
        FromPort: ${ssm:/eregulations/db/port}
        ToPort: ${ssm:/eregulations/db/port}
        SourceSecurityGroupId: !Ref 'ServerlessSecurityGroup'

    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
          - ${ssm:/account_vars/vpc/subnets/private/a/id}
          - ${ssm:/account_vars/vpc/subnets/private/b/id}
        Tags:
          - Key: "Name"
            Value: "DBSubnetGroup"
    # =============================================================================================
    # Aurora DB
    # =============================================================================================


    AuroraRDSClusterParameter15:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql15
        Parameters:
          rds.force_ssl: 1

    AuroraRDSInstanceParameter15:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql15
        Parameters:
          shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan,pgaudit
          log_statement: "ddl"
          log_connections: 1
          log_disconnections: 1
          log_lock_waits: 1
          log_min_duration_statement: 5000
          auto_explain.log_min_duration: 5000
          auto_explain.log_verbose: 1
          log_rotation_age: 1440
          log_rotation_size: 102400
          rds.log_retention_period: 10080
          random_page_cost: 1
          track_activity_query_size: 16384
          idle_in_transaction_session_timeout: 7200000
          statement_timeout: 20000
          search_path: '"$user",public'
          log_hostname: 1
          pgaudit.role: "rds_pgaudit"
          pgaudit.log: "ALL"
          pgaudit.log_level: "LOG"
          pgaudit.log_parameter: 1
          pgaudit.log_statement_once: 0
          pgaudit.log_catalog: 1

    RDSResource15:
      Type: AWS::RDS::DBCluster
      DeletionPolicy: Retain
      Properties:
        MasterUsername: ${self:custom.settings.USERNAME}
        StorageEncrypted: true
        MasterUserPassword: ${ssm:/eregulations/db/password}
        DBSubnetGroupName:
          Ref: DBSubnetGroup
        Engine: aurora-postgresql
        EngineVersion: "15.8"
        DatabaseName: 'eregs'
        BackupRetentionPeriod: 7
        DBClusterParameterGroupName:
          Ref: AuroraRDSClusterParameter15
        VpcSecurityGroupIds:
          - !Ref 'DBSecurityGroup'
    AuroraRDSInstance15:
      Type: AWS::RDS::DBInstance
      DeletionPolicy: Retain
      Properties:
        DBInstanceClass: db.r6g.large
        StorageEncrypted: true
        Engine: aurora-postgresql
        EngineVersion: "15.8"
        PubliclyAccessible: false
        DBParameterGroupName:
          Ref: AuroraRDSInstanceParameter15
        DBClusterIdentifier:
          Ref: RDSResource15

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-associate-waf
