service: cmcs-eregs-site
variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  iam:
    role: LambdaFunctionRole
  apiGateway:
    binaryMediaTypes:
      - "multipart/form-data"
      - "application/pdf"
  logs:
    restApi:
      level: INFO
      roleManagedExternally: true
  lambdaHashingVersion: '20201221'
  tracing:
    apiGateway: true
  vpc:
    securityGroupIds:
      - ${self:custom.settings.security_group_ids.${self:custom.stage}}
    subnetIds:
      - ${ssm:/account_vars/vpc/subnets/private/a/id}
      - ${ssm:/account_vars/vpc/subnets/private/b/id}
  deploymentBucket:
      blockPublicAccess: true
  environment:
    DB_NAME: ${self:custom.settings.db_name.${self:custom.stage}}
    DB_USER: ${self:custom.settings.db_user}
    DB_PASSWORD: ${ssm:/eregulations/db/password}
    DB_HOST: ${self:custom.settings.db_host.${self:custom.stage}}
    DB_PORT: ${ssm:/eregulations/db/port}
    HTTP_AUTH_USER: ${ssm:/eregulations/http/user}
    HTTP_AUTH_PASSWORD: ${ssm:/eregulations/http/password}
    DJANGO_USERNAME: ${ssm:/eregulations/http/reader_user}
    DJANGO_PASSWORD: ${ssm:/eregulations/http/reader_password}
    DJANGO_ADMIN_USERNAME: ${ssm:/eregulations/http/user}
    DJANGO_ADMIN_PASSWORD: ${ssm:/eregulations/http/password}
    DJANGO_SETTINGS_MODULE: ${ssm:/eregulations/django_settings_module}
    ALLOWED_HOST: ${self:custom.settings.allowed_host}
    BASE_URL: ${ssm:/eregulations/base_url}
    STATIC_URL: ${self:custom.settings.static_url}
    CUSTOM_URL: ${ssm:/eregulations/custom_url, ''}
    SURVEY_URL: ${ssm:/eregulations/survey_url}
    SIGNUP_URL: ${ssm:/eregulations/signup_url}
    STAGE_ENV: ${self:custom.stage}
    SEARCHGOV_KEY: ${ssm:/eregulations/searchgov/key}
    SEARCHGOV_SITE_NAME: ${ssm:/eregulations/searchgov/site_name}
    AWS_STORAGE_BUCKET_NAME: file-repo-eregs-${self:custom.settings.stage_id}
    OIDC_OP_JWKS_ENDPOINT: ${ssm:/eregulations/oidc/jwks_endpoint}
    OIDC_RP_CLIENT_ID: ${ssm:/eregulations/oidc/client_id}
    OIDC_RP_CLIENT_SECRET: ${ssm:/eregulations/oidc/client_secret}
    OIDC_OP_AUTHORIZATION_ENDPOINT: ${ssm:/eregulations/oidc/authorization_endpoint}
    OIDC_OP_TOKEN_ENDPOINT: ${ssm:/eregulations/oidc/token_endpoint}
    OIDC_OP_USER_ENDPOINT: ${ssm:/eregulations/oidc/user_endpoint}
    OIDC_END_EUA_SESSION: ${ssm:/eregulations/oidc/end_eua_session}
    DEPLOY_NUMBER: ${self:custom.settings.deploy_number.${self:custom.stage}}
    EUA_FEATUREFLAG: ${ssm:/eregulations/eua/featureflag}
    BASIC_SEARCH_FILTER: ${ssm:/eregulations/basic_search_filter}
    QUOTED_SEARCH_FILTER: ${ssm:/eregulations/quoted_search_filter}
    TEXT_EXTRACTOR_ARN: ${self:custom.settings.text_extractor_arn}
    GA_ID: ${ssm:/eregulations/http/google_analytics}

package:
  individually: false
  exclude:
    - node_modules/**
    - nginx/**

custom:
  stage: ${opt:stage, self:provider.stage}
  localstack:
    stages:
      - local
  wsgi:
    app: handler.application
    packRequirements: false
  settings:
    deploy: ${env:DEPLOY, ""} # Deploy number for experimental, typically PR number
    stage_id: ${self:custom.stage}${self:custom.settings.deploy}
    db_name:
      local: eregs
      exp: ${self:custom.settings.stage_id}
      dev: eregs
      val: eregs
      prod: eregs
    db_user: eregsuser
    static_url: ${cf:cmcs-eregs-static-assets-${self:custom.settings.stage_id}.StaticURL}/
    #text_extractor_arn: ${cf:text-extractor-${self:custom.settings.stage_id}.TextDashextractorLambdaFunctionQualifiedArn}
    text_extractor_arn: ""
    deploy_number:
      local: ${sls:instanceId}
      exp: ${env:RUN_ID, ""}
      dev: ${env:RUN_ID, ""}
      val: ${env:RUN_ID, ""}
      prod: ${env:RUN_ID, ""}
    allowed_host: ".amazonaws.com"
    security_group_ids:
      local: !Ref ServerlessSecurityGroup
      exp: ${ssm:/eregulations/aws/securitygroupid}
      dev: !Ref ServerlessSecurityGroup
      val: !Ref ServerlessSecurityGroup
      prod: !Ref ServerlessSecurityGroup
    db_host:
      local:
        Fn::GetAtt: [ RDSResource15, Endpoint.Address ]
      exp: ${ssm:/eregulations/db/host}
      dev: ${ssm:/eregulations/db/host}
      val: ${ssm:/eregulations/db/host}
      prod: ${ssm:/eregulations/db/host}
    associate_waf:
      local: ""
      exp: APIGateway-eregs-allow-usa-plus-territories-${self:custom.settings.stage_id}
      dev: APIGateway-eregs-allow-usa-plus-territories-${self:custom.settings.stage_id}
      val: APIGateway-eregs-allow-usa-plus-territories-${self:custom.settings.stage_id}
      prod: APIGateway-eregs-allow-usa-plus-territories-${self:custom.settings.stage_id}
  cloudfrontInvalidate:
    - distributionId: ${cf:cmcs-eregs-static-assets-${self:custom.settings.stage_id}.CloudFrontDistributionId}
      items:
        - "/*"
  associateWaf:
    name: ${self:custom.settings.associate_waf.${self:custom.stage}}
    version: V2

## CAN FUNCTIONS BE SIMPLIFIED?
functions: ${file(serverless_functions/${self:custom.stage}_functions.yml)}

resources:
  Conditions:
    IsNotExperimental: !Not [!Equals ["exp", "${self:custom.stage}"]]
    IsNotLocal: !Not [!Equals ["local", "${self:custom.stage}"]]

  Resources:
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: file-repo-eregs-${self:custom.settings.stage_id}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000

    WAFRegionalWebACL:
      Type: "AWS::WAFv2::WebACL"
      Condition: IsNotLocal
      Properties:
        Name: APIGateway-eregs-allow-usa-plus-territories-${self:custom.settings.stage_id}
        Scope: REGIONAL
        Description: WAF Regional Web ACL
        DefaultAction:
          Block: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: ApiGateway-eregs-allow-usa-plus-territories
        Rules:
          - Name: eregs-allow-usa-plus-territories-rule
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU
                  - PR
                  - US
                  - UM
                  - VI
                  - MP
                  - AS
            Action:
              Allow: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: eregs-allow-usa-plus-territories-metric

    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${ssm:/account_vars/iam/path}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        PermissionsBoundary:
          Fn::Join:
            - ''
            - - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - ${ssm:/account_vars/iam/permissions_boundary_policy}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: StorageBucketPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Deny
                  Action: "*"
                  Condition:
                    Bool:
                      "aws:SecureTransport": "false"
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref" : "ServerlessDeploymentBucket"
                    - "arn:aws:s3:::file-repo-eregs-${self:custom.settings.stage_id}/*"
          - PolicyName: LambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                     - "s3:GetObject"
                     - "s3:DeleteObject"
                     - "s3:ListBucket"
                   Resource:
                     - Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"
                     - "arn:aws:s3:::file-repo-eregs-${self:custom.settings.stage_id}"
                     - "arn:aws:s3:::file-repo-eregs-${self:custom.settings.stage_id}/*"
                # -  Effect: "Allow"
                #    Action:
                #      - "lambda:InvokeFunction"
                #    Resource:
                #      - "${self:custom.settings.text_extractor_arn}" # Extractor created by the environment

    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Condition: IsNotExperimental
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId: ${ssm:/account_vars/vpc/id}
        Tags:
          - Key: "Name"
            Value: "ServerlessSecurityGroup"

    DBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Condition: IsNotExperimental
      Properties:
        GroupDescription: SecurityGroup for Database
        VpcId: ${ssm:/account_vars/vpc/id}
        Tags:
          - Key: "Name"
            Value: "DBSecurityGroup"

    DBSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Condition: IsNotExperimental
      Properties:
        GroupId: !Ref 'DBSecurityGroup'
        IpProtocol: tcp
        FromPort: ${ssm:/eregulations/db/port}
        ToPort: ${ssm:/eregulations/db/port}
        SourceSecurityGroupId: !Ref 'ServerlessSecurityGroup'

    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Condition: IsNotExperimental
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
          - ${ssm:/account_vars/vpc/subnets/private/a/id}
          - ${ssm:/account_vars/vpc/subnets/private/b/id}
        Tags:
          - Key: "Name"
            Value: "DBSubnetGroup"

    AuroraRDSClusterParameter15:
      Type: AWS::RDS::DBClusterParameterGroup
      Condition: IsNotExperimental
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql15
        Parameters:
          rds.force_ssl: 1

    AuroraRDSInstanceParameter15:
      Type: AWS::RDS::DBParameterGroup
      Condition: IsNotExperimental
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql15
        Parameters:
          shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan,pgaudit
          log_statement: "ddl"
          log_connections: 1
          log_disconnections: 1
          log_lock_waits: 1
          log_min_duration_statement: 5000
          auto_explain.log_min_duration: 5000
          auto_explain.log_verbose: 1
          log_rotation_age: 1440
          log_rotation_size: 102400
          rds.log_retention_period: 10080
          random_page_cost: 1
          track_activity_query_size: 16384
          idle_in_transaction_session_timeout: 7200000
          statement_timeout: 7200000
          search_path: '"$user",public'
          pgaudit.role: "rds_pgaudit"
          pgaudit.log: "ALL"

    RDSResource15:
      Type: AWS::RDS::DBCluster
      Condition: IsNotExperimental
      DeletionPolicy: Retain
      Properties:
        MasterUsername: ${self:custom.settings.db_user}
        StorageEncrypted: true
        MasterUserPassword: ${ssm:/eregulations/db/password}
        DBSubnetGroupName:
          Ref: DBSubnetGroup
        Engine: aurora-postgresql
        EngineVersion: "15.2"
        DatabaseName: 'eregs'
        BackupRetentionPeriod: 7
        DBClusterParameterGroupName:
          Ref: AuroraRDSClusterParameter15
        VpcSecurityGroupIds:
          - !Ref 'DBSecurityGroup'

    AuroraRDSInstance15:
      Type: AWS::RDS::DBInstance
      Condition: IsNotExperimental
      DeletionPolicy: Retain
      Properties:
        DBInstanceClass: db.r6g.large
        StorageEncrypted: true
        Engine: aurora-postgresql
        EngineVersion: "15.2"
        PubliclyAccessible: false
        DBParameterGroupName:
          Ref: AuroraRDSInstanceParameter15
        DBClusterIdentifier:
          Ref: RDSResource15

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-go-plugin
  - serverless-cloudfront-invalidate
  - serverless-associate-waf
  - serverless-localstack
