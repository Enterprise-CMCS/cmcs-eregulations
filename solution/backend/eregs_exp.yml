# This file is uploadable for a fake architecture on AWS.
# Copy these changes to the serverless files and deploy to cloud formation
# Changes made to main serverless should reflect here after merging.
service: cmcs-eregs-site-fake
variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  iam:
    role: LambdaFunctionRole
  lambdaHashingVersion: '20201221'
  environment:
    DB_NAME: eregstest 
    DB_USER: eregstest1 
    DB_PASSWORD: ${ssm:/eregulations/db/password}
    DB_HOST: !GetAtt [RDSResource, Endpoint.Address]
    DB_PORT: !GetAtt [RDSResource, Endpoint.Port]
    #SURVEY_URL: ${ssm:/eregulations/survey_url}
  vpc:
    securityGroupIds:
      - !Ref ServerlessSecurityGroup
    subnetIds:
      - subnet-021d6d373ec2d8c86
      - subnet-0121c25b7306fe803
  deploymentBucket:
    blockPublicAccess: true
package:
  individually: false
  exclude:
    - node_modules/**
    - nginx/**

custom:
#  stage: ${opt:stage, self:provider.stage}
  wsgi:
    app: handler.application
    packRequirements: false
  settings:
    # static_url: ${cf:cmcs-eregs-static-assets-dev.StaticURL}/
    DB_NAME: eregs
    USERNAME: eregsuser
    ALLOWED_HOST: '.amazonaws.com'
  cloudfrontInvalidate:
#    - distributionId: ${cf:cmcs-eregs-static-assets-dev.CloudFrontDistributionId}
      items:
        - "/*"

functions:
  reg_site:
    environment:
      # STATIC_URL: ${self:custom.settings.static_url}
      WORKING_DIR: /var/task
    handler: wsgi_handler.handler
#    layers:
#      - ${cf:cmcs-eregs-static-assets-dev.PythonRequirementsLambdaLayerQualifiedArn}
    events:
      - http: ANY /
      - http: ANY {proxy+}
    timeout: 10
  reg_core_migrate:
    handler: migrate.handler
#    layers:
#      - ${cf:cmcs-eregs-static-assets-dev.PythonRequirementsLambdaLayerQualifiedArn}
    timeout: 300
  create_su:
    handler: createsu.handler
#    layers:
#      - ${cf:cmcs-eregs-static-assets-dev.PythonRequirementsLambdaLayerQualifiedArn}
    timeout: 300
#  populate_content:
#   environment:
#      SUPPLEMENTAL_CONTENT_PATH: /var/task/guidance
#    handler: populate_content.handler
#    layers:
#      - ${cf:cmcs-eregs-static-assets-dev.PythonRequirementsLambdaLayerQualifiedArn}
#    timeout: 300


resources:

  Resources:

    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/delegatedadmin/developer/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole

        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
         - PolicyName: LambdaPolicy
           PolicyDocument:
             Version: '2012-10-17'
             Statement:
               - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                 Action:
                   - logs:CreateLogGroup
                   - logs:CreateLogStream
                   - logs:PutLogEvents
                 Resource:
                   - 'Fn::Join':
                     - ':'
                     -
                       - 'arn:aws:logs'
                       - Ref: 'AWS::Region'
                       - Ref: 'AWS::AccountId'
                       - 'log-group:/aws/lambda/*:*:*'
               -  Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref" : "ServerlessDeploymentBucket"

    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId: 'vpc-079fb0427309a063e'
        Tags:
          - Key: "Name"
            Value: "ServerlessSecurityGroup"

    DBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Database
        VpcId: 'vpc-079fb0427309a063e'
        Tags:
          - Key: "Name"
            Value: "DBSecurityGroup"

    DBSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref 'DBSecurityGroup'
        IpProtocol: tcp
        FromPort: !GetAtt [RDSResource, Endpoint.Port]
        ToPort: !GetAtt [RDSResource, Endpoint.Port]
        SourceSecurityGroupId: !Ref 'ServerlessSecurityGroup'

    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
          - subnet-021d6d373ec2d8c86 
          - subnet-0121c25b7306fe803 
        Tags:
          - Key: "Name"
            Value: "DBSubnetGroup"
    # =============================================================================================
    # Aurora DB
    # =============================================================================================

    AuroraRDSClusterParameter:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql12
        Parameters:
          rds.force_ssl: 1

    AuroraRDSInstanceParameter:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql12
        Parameters:
          shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan,pgaudit
          log_statement: "ddl"
          log_connections: 1
          log_disconnections: 1
          log_lock_waits: 1
          log_min_duration_statement: 5000
          auto_explain.log_min_duration: 5000
          auto_explain.log_verbose: 1
          log_rotation_age: 1440
          log_rotation_size: 102400
          rds.log_retention_period: 10080
          random_page_cost: 1
          track_activity_query_size: 16384
          idle_in_transaction_session_timeout: 7200000
          statement_timeout: 7200000
          search_path: '"$user",public'
          pgaudit.role: "rds_pgaudit"
          pgaudit.log: "ALL"

    RDSResource:
      Type: AWS::RDS::DBCluster
      Properties:
        MasterUsername: ${self:custom.settings.USERNAME}
        MasterUserPassword: ${ssm:/eregulations/db/password}
        DBSubnetGroupName:
          Ref: DBSubnetGroup
        Engine: aurora-postgresql
        EngineVersion: "12.8"
        DatabaseName: ${self:custom.settings.DB_NAME}
        BackupRetentionPeriod: 3
        DBClusterParameterGroupName:
          Ref: AuroraRDSClusterParameter
        VpcSecurityGroupIds:
          - !Ref 'DBSecurityGroup'

    AuroraRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceClass: db.r6g.large
        Engine: aurora-postgresql
        EngineVersion: "12.8"
        PubliclyAccessible: false
        DBParameterGroupName:
          Ref: AuroraRDSInstanceParameter
        DBClusterIdentifier:
          Ref: RDSResource

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-go-plugin
  - serverless-cloudfront-invalidate
