service: cmcs-eregs-site
variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: python3.10
  region: us-east-1
  iam:
    role: LambdaFunctionRole
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'application/pdf'
  logs:
    restApi:
      level: INFO
      roleManagedExternally: true
  lambdaHashingVersion: '20201221'
  environment:
    DB_NAME: ${self:custom.settings.DB_NAME}
    DB_USER: ${self:custom.settings.USERNAME}
    DB_PASSWORD: ${ssm:/eregulations/db/password}
    DB_HOST: ${ssm:/eregulations/db/host}
    DB_PORT: ${ssm:/eregulations/db/port}
    HTTP_AUTH_USER: ${ssm:/eregulations/http/user}
    HTTP_AUTH_PASSWORD: ${ssm:/eregulations/http/password}
    DJANGO_USERNAME: ${ssm:/eregulations/http/reader_user}
    DJANGO_PASSWORD: ${ssm:/eregulations/http/reader_password}
    DJANGO_ADMIN_USERNAME: ${ssm:/eregulations/http/user}
    DJANGO_ADMIN_PASSWORD: ${ssm:/eregulations/http/password}
    DJANGO_SETTINGS_MODULE: ${ssm:/eregulations/django_settings_module}
    ALLOWED_HOST: '.amazonaws.com'
    BASE_URL: ${ssm:/eregulations/base_url}
    STAGE_ENV: ${self:custom.stage}
    STATIC_URL: ${self:custom.settings.static_url}
    CUSTOM_URL: ${ssm:/eregulations/custom_url, ''}
    SURVEY_URL: ${ssm:/eregulations/survey_url}
    SIGNUP_URL: ${ssm:/eregulations/signup_url}
    SEARCHGOV_KEY: ${ssm:/eregulations/searchgov/key}
    SEARCHGOV_SITE_NAME: ${ssm:/eregulations/searchgov/site_name}
    AWS_STORAGE_BUCKET_NAME: file-repo-eregs-${self:custom.stage}
    OIDC_OP_JWKS_ENDPOINT: ${ssm:/eregulations/oidc/jwks_endpoint}
    OIDC_RP_CLIENT_ID: ${ssm:/eregulations/oidc/client_id}
    OIDC_RP_CLIENT_SECRET: ${ssm:/eregulations/oidc/client_secret}
    OIDC_OP_AUTHORIZATION_ENDPOINT: ${ssm:/eregulations/oidc/authorization_endpoint}
    OIDC_OP_TOKEN_ENDPOINT: ${ssm:/eregulations/oidc/token_endpoint}
    OIDC_OP_USER_ENDPOINT: ${ssm:/eregulations/oidc/user_endpoint}
    OIDC_END_EUA_SESSION: ${ssm:/eregulations/oidc/end_eua_session}
    DEPLOY_NUMBER: ${env:RUN_ID}
    EUA_FEATUREFLAG: ${ssm:/eregulations/eua/featureflag}
    BASIC_SEARCH_FILTER: ${ssm:/eregulations/basic_search_filter}
    QUOTED_SEARCH_FILTER: ${ssm:/eregulations/quoted_search_filter}
    # This text extractor is for an experimental deploy if one is made.
    TEXT_EXTRACTOR_ARN: ${self:custom.settings.text_extractor_arn}
    # This text extractor is the "main dev" extractor.  Used if one is not created in experimental.
    TEXTRACT_ARN: ${ssm:/eregulations/textextractor-arn}
  vpc:
    securityGroupIds:
      - ${ssm:/eregulations/aws/securitygroupid}
    subnetIds:
      - ${ssm:/account_vars/vpc/subnets/private/a/id}
      - ${ssm:/account_vars/vpc/subnets/private/b/id}
  deploymentBucket:
      blockPublicAccess: true
  tracing:
    apiGateway: true
package:
  #patterns:
  #  - '!node_modules/**'
  #  - '!nginx/**'
  #  - '!package.json'
  #  - '!package-lock.json'
  individually: false
  exclude:
    - node_modules/**
    - nginx/**

custom:
  environment: 'experimental'
  stage: ${opt:stage, self:provider.stage}
  wsgi:
    app: handler.application
    packRequirements: false
  settings:
    static_url: ${cf:cmcs-eregs-static-assets-${self:custom.stage}.StaticURL}/
    DB_NAME: ${self:custom.stage}
    USERNAME: eregsuser
    ALLOWED_HOST: '.amazonaws.com'
    text_extractor_arn: ${cf:text-extractor-${self:custom.stage}.TextDashextractorLambdaFunctionQualifiedArn}
  cloudfrontInvalidate:
    - distributionId: ${cf:cmcs-eregs-static-assets-${self:custom.stage}.CloudFrontDistributionId}
      items:
        - "/*"
  associateWaf:
    name: APIGateway-eregs-allow-usa-plus-territories-${self:custom.stage}
    version: V2
functions: ${file(serverless_functions/${self:custom.environment}_functions.yml)}

resources:
  Resources:
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: file-repo-eregs-${self:custom.stage}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000
    WAFRegionalWebACL: ${file(aws_resources/waf.yml):WAFRegionalWebACL}
    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${ssm:/account_vars/iam/path}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        PermissionsBoundary:
          Fn::Join:
            - ''
            - - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - ${ssm:/account_vars/iam/permissions_boundary_policy}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: StorageBucketPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Deny
                  Action: "*"
                  Condition:
                    Bool:
                      "aws:SecureTransport": false
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref" : "ServerlessDeploymentBucket"
                    - "arn:aws:s3:::file-repo-eregs-${self:custom.stage}/*"
          - PolicyName: LambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                     - "s3:GetObject"
                     - "s3:DeleteObject"
                     - "s3:ListBucket"
                   Resource:
                     - Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"
                     - "arn:aws:s3:::file-repo-eregs-${self:custom.stage}"
                     - "arn:aws:s3:::file-repo-eregs-${self:custom.stage}/*"
                -  Effect: "Allow"
                   Action:
                     - "lambda:InvokeFunction"
                   Resource:
                     - "${ssm:/eregulations/textextractor-arn}"
                     - "${self:custom.settings.text_extractor_arn}" # Extractor created by the environment


plugins:
  - serverless-wsgi
  - serverless-cloudfront-invalidate
  - serverless-associate-waf
