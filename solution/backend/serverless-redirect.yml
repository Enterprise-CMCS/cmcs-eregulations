service: redirect-api

provider:
  name: aws
  runtime: python3.6
  region: us-east-1
  iam:
    role: LambdaFunctionRole
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'application/pdf'
  logs:
    restApi:
      level: INFO
      roleManagedExternally: true
  lambdaHashingVersion: '20201221'
  vpc:
    securityGroupIds:
      - ${ssm:/eregulations/aws/securitygroupid}
    subnetIds:
      - ${ssm:/account_vars/vpc/subnets/private/a/id}
      - ${ssm:/account_vars/vpc/subnets/private/b/id}
  deploymentBucket:
      blockPublicAccess: true
  tracing:
    apiGateway: true

functions:
  redirectFunction:
    handler: redirect_lambda.handler
    timeout: 30
    events:
      - http: ANY /redirect
      - http: ANY /redirect/{proxy+}
resources:
  Resources:
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: file-repo-eregs-${self:custom.stage}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000
    WAFRegionalWebACL: ${file(aws_resources/waf.yml):WAFRegionalWebACL}
    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${ssm:/account_vars/iam/path}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        PermissionsBoundary:
          Fn::Join:
            - ''
            - - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - ${ssm:/account_vars/iam/permissions_boundary_policy}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: StorageBucketPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Deny
                  Action: "*"
                  Condition:
                    Bool:
                      "aws:SecureTransport": false
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref" : "ServerlessDeploymentBucket"
                    - "arn:aws:s3:::file-repo-eregs-${self:custom.stage}/*"
          - PolicyName: LambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                     - "s3:GetObject"
                     - "s3:DeleteObject"
                     - "s3:ListBucket"
                   Resource:
                     - Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"
                     - "arn:aws:s3:::file-repo-eregs-${self:custom.stage}"
                     - "arn:aws:s3:::file-repo-eregs-${self:custom.stage}/*"
                -  Effect: "Allow"
                   Action:
                     - "lambda:InvokeFunction"
                   Resource:
                     - "${ssm:/eregulations/textextractor-arn}"
                     - "${self:custom.settings.text_extractor_arn}" # Extractor created by the environment

custom:
  wsgi:
    app: handler.application
    packRequirements: false

plugins:
  - serverless-wsgi
