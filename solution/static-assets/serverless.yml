service: cmcs-eregs-static-assets

provider:
  name: aws
  runtime: python3.12
  region: us-east-1
  deploymentBucket:
    blockPublicAccess: true

custom:
  stage: ${opt:stage, self:provider.stage}
  s3Sync:
    - bucketName: eregs-${self:custom.stage}-site-assets
      localDir: ./regulations
      deleteRemoved: false
  pythonRequirements:
    layer:
      name: python-django
      description: "Layer which contains django requirements"
      compatibleRuntimes:
        - python3.12

package:
  #patterns:
  #  - '!node_modules/**'
  #  - '!nginx/**'
  #  - '!package.json'
  #  - '!package-lock.json'
  individually: false
  exclude:
    - node_modules/**
    - nginx/**

plugins:
  - serverless-s3-sync
  - serverless-python-requirements

resources:
  Resources:
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: eregs-${self:custom.stage}-site-assets
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000
    CloudFrontLogsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: eregs-${self:custom.stage}-cloudfront-logs
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
        AccessControl: LogDeliveryWrite
    CloudFrontLogsBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: !Ref CloudFrontLogsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: "AllowSSLRequestsOnly"
              Action: "s3:*"
              Effect: "Deny"
              Resource:
                - !Sub "arn:aws:s3:::${CloudFrontLogsBucket}/*"
                - !Sub "arn:aws:s3:::${CloudFrontLogsBucket}"
              Condition:
                Bool:
                  "aws:SecureTransport": "false"
              Principal: "*"
            - Sid: "AllowCloudFrontLogsDelivery"
              Effect: "Allow"
              Principal:
                Service: "delivery.logs.amazonaws.com"
              Action: "s3:PutObject"
              Resource: !Sub "arn:aws:s3:::${CloudFrontLogsBucket}/*"
              Condition:
                StringEquals:
                  "s3:x-amz-acl": "bucket-owner-full-control"

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI to prevent direct public access to the bucket

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 's3:GetObject'
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AssetsBucket
                  - /*
              Principal:
                CanonicalUser:
                  Fn::GetAtt:
                  - CloudFrontOriginAccessIdentity
                  - S3CanonicalUserId
            - Effect: Deny
              Action: 's3:*'
              Resource:
                - !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref AssetsBucket
                    - /*
                - !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref AssetsBucket
              Principal: '*'
              Condition:
                Bool:
                  aws:SecureTransport: false
        Bucket: !Ref AssetsBucket
    CloudFrontWebACL:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: eregs-${self:custom.stage}-cloudfront-ACL
        DefaultAction:
          Allow: {}
        Scope: CLOUDFRONT
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: eregs-${self:custom.stage}-cloudfront-metric
        Rules:
          - Name: eregs-allow-usa-plus-territories-rule-cf
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU
                  - PR
                  - US
                  - UM
                  - VI
                  - MP
                  - AS
            Action:
              Allow: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: eregs-allow-usa-plus-territories-metric-CLOUDFRONT
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CloudFront Distro for the static website hosted in S3
          WebACLId: !GetAtt CloudFrontWebACL.Arn
          Aliases:
            - Ref: AWS::NoValue
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - AssetsBucket
                  - DomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                  - ''
                  - - origin-access-identity/cloudfront/
                    - Ref: CloudFrontOriginAccessIdentity
          Logging:
            IncludeCookies: false
            Bucket: eregs-${self:custom.stage}-cloudfront-logs.s3.amazonaws.com
            Prefix: cf-logs/
          Enabled: true
          HttpVersion: 'http2'
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: false
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${ssm:/eregulations/acm-cert-arn}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          DefaultRootObject: index.html

  Outputs:
    CloudFrontDistributionId:
      Value:
        Ref: CloudFrontDistribution
    StaticURL:
      Value:
        Fn::Join:
          - ''
          -
            - https://
            - Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
