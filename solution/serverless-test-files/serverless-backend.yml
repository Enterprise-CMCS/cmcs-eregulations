service: cmcs-eregs-site
variablesResolutionMode: 20210326
#there are some slight differences to this file.  We are creating the VPC and subnets and not executing any of the lambdas.  This will be handled when we finish the project.
#change the db password and teh username/name to whatever you would like.  You can change other fields if you would like as well but be wary it might not work with your changes.
provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  iam:
    role: LambdaFunctionRole
  lambdaHashingVersion: '20201221'
  environment:
    DB_NAME: eregstest 
    DB_USER: eregstest1 
    DB_HOST: !GetAtt [RDSResource, Endpoint.Address]
    DB_PORT: !GetAtt [RDSResource, Endpoint.Port]

  deploymentBucket:
    blockPublicAccess: true
package:
  individually: false
  exclude:
    - node_modules/**
    - nginx/**

custom:
  wsgi:
    app: handler.application
    packRequirements: false
  settings:
    DB_NAME: eregs
    USERNAME: eregsuser
    DB_PASSWORD: yourpasswordofchoice1
    ALLOWED_HOST: '.amazonaws.com'
  cloudfrontInvalidate:
      items:
        - "/*"

functions:
  reg_site:
    environment:
      WORKING_DIR: /var/task
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: ANY {proxy+}
    timeout: 10
  reg_core_migrate:
    handler: migrate.handler
    timeout: 300
  create_su:
    handler: createsu.handler
    timeout: 300


resources:

  Resources:
    myVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.147.73.192/26
        EnableDnsSupport: 'true'
        EnableDnsHostnames: 'true'
        Tags:
        - Key: stack
          Value: production
    mySubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: myVPC
        CidrBlock: 10.147.73.192/28
        AvailabilityZone: "us-east-1a"
        Tags:
        - Key: stack
          Value: production
    mySubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.147.73.208/28
        VpcId:
          Ref: myVPC
        AvailabilityZone: "us-east-1b"
        Tags:
        - Key: stack
          Value: production
    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/delegatedadmin/developer/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: myVPC
        Tags:
          - Key: "Name"
            Value: "ServerlessSecurityGroup"

    DBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Database
        VpcId:
          Ref: myVPC
        Tags:
          - Key: "Name"
            Value: "DBSecurityGroup"

    DBSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref 'DBSecurityGroup'
        IpProtocol: tcp
        FromPort: !GetAtt [RDSResource, Endpoint.Port]
        ToPort: !GetAtt [RDSResource, Endpoint.Port]
        SourceSecurityGroupId: !Ref 'ServerlessSecurityGroup'

    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
          - !Ref 'mySubnet'
          - !Ref 'mySubnet2'
        Tags:
          - Key: "Name"
            Value: "DBSubnetGroup"
    # =============================================================================================
    # Aurora DB
    # =============================================================================================

    AuroraRDSClusterParameter:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql12
        Parameters:
          rds.force_ssl: 1

    AuroraRDSInstanceParameter:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql12
        Parameters:
          shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan,pgaudit
          log_statement: "ddl"
          log_connections: 1
          log_disconnections: 1
          log_lock_waits: 1
          log_min_duration_statement: 5000
          auto_explain.log_min_duration: 5000
          auto_explain.log_verbose: 1
          log_rotation_age: 1440
          log_rotation_size: 102400
          rds.log_retention_period: 10080
          random_page_cost: 1
          track_activity_query_size: 16384
          idle_in_transaction_session_timeout: 7200000
          statement_timeout: 7200000
          search_path: '"$user",public'
          pgaudit.role: "rds_pgaudit"
          pgaudit.log: "ALL"

    RDSResource:
      Type: AWS::RDS::DBCluster
      Properties:
        MasterUsername: ${self:custom.settings.USERNAME}
        MasterUserPassword: ${self:custom.settings.DB_PASSWORD}
        DBSubnetGroupName:
          Ref: DBSubnetGroup
        Engine: aurora-postgresql
        EngineVersion: "12.8"
        DatabaseName: ${self:custom.settings.DB_NAME}
        BackupRetentionPeriod: 3
        DBClusterParameterGroupName:
          Ref: AuroraRDSClusterParameter
        VpcSecurityGroupIds:
          - !Ref 'DBSecurityGroup'

    AuroraRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceClass: db.r6g.large
        Engine: aurora-postgresql
        EngineVersion: "12.8"
        PubliclyAccessible: false
        DBParameterGroupName:
          Ref: AuroraRDSInstanceParameter
        DBClusterIdentifier:
          Ref: RDSResource

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-go-plugin