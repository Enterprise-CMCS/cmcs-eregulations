service: text-extractor

provider:
  name: aws
  iam:
    role: LambdaFunctionRole
  deploymentBucket:
    blockPublicAccess: true
  ecr:
    images:
      appimage:
        path: ../.
        file: text-extractor/Dockerfile
  environment:
    LOG_LEVEL: ${ssm:/eregulations/text_extractor/log_level}
    HTTP_AUTH_USER: ${ssm:/eregulations/http/user}
    HTTP_AUTH_PASSWORD: ${ssm:/eregulations/http/password}

custom:
  stage: ${opt:stage, self:provider.stage}

functions:
  text-extractor:
    image:
      name: appimage
    timeout: 900
    reservedConcurrency: 10
    events:
      - sqs:
          arn: !GetAtt TextExtractorQueue.Arn
          batchSize: 1

resources:
  Outputs:
    TextExtractorQueueUrl:
      Value: !GetAtt TextExtractorQueue.QueueUrl
    TextExtractorQueueArn:
      Value: !GetAtt TextExtractorQueue.Arn
      
  Resources:
    TextExtractorQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-text-extractor-queue
        DelaySeconds: 0
        MessageRetentionPeriod: 345600 # 4 days
        VisibilityTimeout: 900
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
          maxReceiveCount: 5 # retry 5 times before moving to dead-letter queue
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-text-extractor-dl-queue
    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${ssm:/account_vars/iam/path}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        PermissionsBoundary:
          Fn::Join:
            - ''
            - - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - ${ssm:/account_vars/iam/permissions_boundary_policy}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: QueuePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                  Resource: !GetAtt TextExtractorQueue.Arn
          - PolicyName: TextDetectionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: "textract:DetectDocumentText"
                  Resource: "*"
                  Sid: "DetectDocumentText"
          - PolicyName: StorageBucketPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Deny
                  Action: "*"
                  Condition:
                    Bool:
                      "aws:SecureTransport": false
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref" : "ServerlessDeploymentBucket"
                    - "arn:aws:s3:::file-repo-eregs-${self:custom.stage}/*"
          - PolicyName: LambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                     - "s3:GetObject"
                     - "s3:DeleteObject"
                   Resource:
                     - Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"
                     - "arn:aws:s3:::file-repo-eregs-${self:custom.stage}*"

    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId: ${ssm:/account_vars/vpc/id}
        Tags:
          - Key: "Name"
            Value: "ServerlessSecurityGroup"
