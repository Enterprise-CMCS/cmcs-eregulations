# Generated by Django 3.2.7 on 2021-10-05 19:06

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


def migrate_categories(apps, schema_editor):
    OldCategory = apps.get_model("supplementary_content", "OldCategory")
    Category = apps.get_model("supplementary_content", "Category")
    SubCategory = apps.get_model("supplementary_content", "SubCategory")

    # no cases of 3-level depth before now, so deal with 2 levels only
    old_categories = OldCategory.objects.all()
    parent_categories = [i for i in old_categories if i.parent is None]
    child_categories = [i for i in old_categories if i.parent is not None]
    new_categories = {}

    # construct tree of old parent categories
    for category in parent_categories:
        new_categories[category.id] = {
            "id": category.id,
            "title": category.title,
            "description": category.description,
            "order": category.order,
            "children": [],
        }
    # append child categories
    for child in child_categories:
        try:
            new_categories[child.parent.id]["children"].append({
                "id": child.id,
                "title": child.title,
                "description": child.description,
                "order": child.order,
            })
        except KeyError:
            pass
    
    # create new category objects
    for category in list(new_categories.values()):
        parent = Category.objects.create(
            old_id=category["id"],
            title=category["title"],
            description=category["description"],
            order=category["order"],
        )
        for child in category["children"]:
            SubCategory.objects.create(
                old_id=child["id"],
                title=child["title"],
                description=child["description"],
                order=child["order"],
                parent=parent,
            )


def migrate_sections(apps, schema_editor):
    OldRegulationSection = apps.get_model("supplementary_content", "OldRegulationSection")
    Section = apps.get_model("supplementary_content", "Section")
    for section in OldRegulationSection.objects.all():
        Section.objects.create(
            title=int(section.title),
            part=int(section.part),
            section_id=int(section.section),
            old_id=section.id,
        )


def migrate_supplemental_content(apps, schema_editor):
    OldSupplementaryContent = apps.get_model("supplementary_content", "OldSupplementaryContent")
    SupplementalContent = apps.get_model("supplementary_content", "SupplementalContent")
    Category = apps.get_model("supplementary_content", "Category")
    Section = apps.get_model("supplementary_content", "Section")

    for content in OldSupplementaryContent.objects.all():
        # acquire category from old ID
        try:
            new_category = Category.objects.filter(old_id=content.category.id)[0]
        except IndexError:
            new_category = None
        
        # acquire list of sections from old ID's
        new_sections = []
        for section in content.sections.all():
            try:
                new_sections.append(
                    Section.objects.filter(old_id=section.id)[0]
                )
            except IndexError:
                pass

        new_content = SupplementalContent.objects.create(
            title=content.title,
            description=content.description,
            url=content.url,
            date=content.date,
            approved=content.approved,
            created_at=content.created_at,
            updated_at=content.updated_at,
            category=new_category,
        )
        new_content.locations.set(new_sections)
        new_content.save()


class Migration(migrations.Migration):

    dependencies = [
        ('supplementary_content', '0007_auto_20210831_1612'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='Category',
            new_name='OldCategory',
        ),
        migrations.RenameModel(
            old_name='RegulationSection',
            new_name='OldRegulationSection',
        ),
        migrations.RenameModel(
            old_name='SupplementaryContent',
            new_name='OldSupplementaryContent',
        ),
        migrations.AlterModelOptions(
            name='oldregulationsection',
            options={'ordering': ['title', 'part', 'section']},
        ),
        migrations.CreateModel(
            name='AbstractLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.IntegerField()),
                ('part', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='AbstractSupplementalContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.IntegerField(blank=True, default=0)),
                ('show_if_empty', models.BooleanField(default=False)),
                ('old_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('abstractlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='supplementary_content.abstractlocation')),
                ('section_id', models.IntegerField()),
                ('parent', models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='supplementary_content.abstractlocation')),
                ('old_id', models.IntegerField()),
            ],
            bases=('supplementary_content.abstractlocation',),
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('category_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='supplementary_content.category')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_categories', to='supplementary_content.category')),
            ],
            bases=('supplementary_content.category',),
        ),
        migrations.CreateModel(
            name='SubjectGroup',
            fields=[
                ('abstractlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='supplementary_content.abstractlocation')),
                ('subject_group_id', models.CharField(max_length=512)),
            ],
            bases=('supplementary_content.abstractlocation',),
        ),
        migrations.CreateModel(
            name='Subpart',
            fields=[
                ('abstractlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='supplementary_content.abstractlocation')),
                ('subpart_id', models.CharField(max_length=12)),
            ],
            bases=('supplementary_content.abstractlocation',),
        ),
        migrations.CreateModel(
            name='SubSubCategory',
            fields=[
                ('category_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='supplementary_content.category')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_sub_categories', to='supplementary_content.subcategory')),
            ],
            bases=('supplementary_content.category',),
        ),
        migrations.CreateModel(
            name='SupplementalContent',
            fields=[
                ('abstractsupplementalcontent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='supplementary_content.abstractsupplementalcontent')),
                ('title', models.CharField(blank=True, max_length=512, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('url', models.URLField(blank=True, max_length=512, null=True)),
                ('date', models.CharField(blank=True, help_text='Leave blank or enter one of: "YYYY", "YYYY-MM", or "YYYY-MM-DD".', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date field must be blank or of format "YYYY", "YYYY-MM", or "YYYY-MM-DD"! For example: 2021, 2021-01, or 2021-01-31.', regex='^\\d{4}((-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]))|(-(0[1-9]|1[0-2])))?$')])),
            ],
            bases=('supplementary_content.abstractsupplementalcontent',),
        ),
        migrations.AddField(
            model_name='abstractsupplementalcontent',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supplemental_content', to='supplementary_content.category'),
        ),
        migrations.AddField(
            model_name='abstractsupplementalcontent',
            name='locations',
            field=models.ManyToManyField(blank=True, null=True, related_name='supplemental_content', to='supplementary_content.AbstractLocation'),
        ),
        migrations.RunPython(migrate_sections),
        migrations.RunPython(migrate_categories),
        migrations.RunPython(migrate_supplemental_content),
        migrations.RemoveField(
            model_name='Category',
            name='old_id',
        ),
        migrations.RemoveField(
            model_name='Section',
            name='old_id',
        ),
        migrations.AlterUniqueTogether(
            name='oldregulationsection',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='oldregulationsection',
            name='supplementary_content',
        ),
        migrations.RemoveField(
            model_name='oldsupplementarycontent',
            name='category',
        ),
        migrations.DeleteModel(
            name='OldCategory',
        ),
        migrations.DeleteModel(
            name='OldRegulationSection',
        ),
        migrations.DeleteModel(
            name='OldSupplementaryContent',
        ),
    ]
