service: cmcs-eregs

provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  role: LambdaFunctionRole
  environment:
    DB_NAME: ${self:custom.settings.DB_NAME}
    DB_USER: ${self:custom.settings.USERNAME}
    DB_PASSWORD: ${ssm:/eregulations/db/password~true}
    DB_HOST: !GetAtt [RDSResource, Endpoint.Address]
    DB_PORT: !GetAtt [RDSResource, Endpoint.Port]
    HTTP_AUTH_USER: ${ssm:/eregulations/http/user~true}
    HTTP_AUTH_PASSWORD: ${ssm:/eregulations/http/password~true}
    ALLOWED_HOST: '.amazonaws.com'
  vpc:
    securityGroupIds:
      - !Ref ServerlessSecurityGroup
    subnetIds:
      - ${ssm:/account_vars/vpc/subnets/private/a/id~true}
      - ${ssm:/account_vars/vpc/subnets/private/b/id~true}

package:
  individually: true

custom:
  stage: ${opt:stage, self:provider.stage}
  wsgi:
    app: handler.application
    packRequirements: false
  settings:
    DB_NAME: eregs
    USERNAME: eregsuser
    ALLOWED_HOST: '.amazonaws.com'

functions:
  reg_core:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: ANY {proxy+}
  reg_core_migrate:
    handler: migrate.handler
    timeout: 15
  reg_core_rebuild_index:
    handler: rebuild_index.handler
    timeout: 120

resources:

  Resources: 

    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${ssm:/account_vars/iam/path~true}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        PermissionsBoundary:
          Fn::Join:
            - ''
            - - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - ${ssm:/account_vars/iam/permissions_boundary_policy~true}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: LambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                   Resource:
                     Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"

    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId: ${ssm:/account_vars/vpc/id~true}
        Tags:
          - Key: "Name"
            Value: "ServerlessSecurityGroup"

    DBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Database
        VpcId: ${ssm:/account_vars/vpc/id~true}
        Tags:
          - Key: "Name"
            Value: "DBSecurityGroup"

    DBSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref 'DBSecurityGroup'
        IpProtocol: tcp
        FromPort: !GetAtt [RDSResource, Endpoint.Port]
        ToPort: !GetAtt [RDSResource, Endpoint.Port]
        SourceSecurityGroupId: !Ref 'ServerlessSecurityGroup'

    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
          - ${ssm:/account_vars/vpc/subnets/private/a/id~true}
          - ${ssm:/account_vars/vpc/subnets/private/b/id~true}
        Tags:
          - Key: "Name"
            Value: "DBSubnetGroup"
    # =============================================================================================
    # Aurora DB
    # =============================================================================================

    AuroraRDSClusterParameter:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql9.6
        Parameters:
          rds.force_ssl: 1

    AuroraRDSInstanceParameter:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql9.6
        Parameters:
          shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan,pgaudit
          log_statement: "ddl"
          log_connections: 1
          log_disconnections: 1
          log_lock_waits: 1
          log_min_duration_statement: 5000
          auto_explain.log_min_duration: 5000
          auto_explain.log_verbose: 1
          log_rotation_age: 1440
          log_rotation_size: 102400
          rds.log_retention_period: 10080
          random_page_cost: 1
          track_activity_query_size: 16384
          idle_in_transaction_session_timeout: 7200000
          statement_timeout: 7200000
          search_path: '"$user",public'

    RDSResource:
      Type: AWS::RDS::DBCluster
      Properties:
        MasterUsername: ${self:custom.settings.USERNAME}
        MasterUserPassword: ${ssm:/eregulations/db/password~true}
        DBSubnetGroupName:
          Ref: DBSubnetGroup
        Engine: aurora-postgresql
        EngineVersion: "9.6.16"
        DatabaseName: ${self:custom.settings.DB_NAME}
        BackupRetentionPeriod: 3
        DBClusterParameterGroupName:
          Ref: AuroraRDSClusterParameter
        VpcSecurityGroupIds:
          - !Ref 'DBSecurityGroup'

    AuroraRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceClass: db.r4.large
        Engine: aurora-postgresql
        EngineVersion: "9.6.16"
        PubliclyAccessible: false
        DBParameterGroupName:
          Ref: AuroraRDSInstanceParameter
        DBClusterIdentifier:
          Ref: RDSResource

  Outputs:
    LambdaFunctionRoleArn:
      Value: !GetAtt LambdaFunctionRole.Arn

plugins:
  - serverless-python-requirements
  - serverless-wsgi
