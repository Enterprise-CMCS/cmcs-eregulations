service: cmcs-eregs-parser

provider:
  name: aws
  runtime: go1.x
  region: us-east-1
  role: LambdaFunctionRole
  environment:
    PARSER_ON_LAMBDA: true
    EREGS_USERNAME: ${ssm:/eregulations/http/user~true}
    EREGS_PASSWORD: ${ssm:/eregulations/http/password~true}
    EREGS_API_URL: ${self:custom.settings.eregs_url}

custom:
  stage: ${opt:stage, self:provider.stage}
  settings:
    eregs_url: ${cf:cmcs-eregs-site-${self:custom.stage}.ServiceEndpoint}/v2/
  go:
    baseDir: ../tools/ecfr-parser

functions:
  ecfr_parser:
    handler: .
    timeout: 900
    events:
      - schedule: cron(0 0 * * ? *)

resources:

  Resources:

    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${ssm:/account_vars/iam/path~true}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        PermissionsBoundary:
          Fn::Join:
            - ''
            - - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - ${ssm:/account_vars/iam/permissions_boundary_policy~true}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: LambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                   Resource:
                     Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"

    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId: ${ssm:/account_vars/vpc/id~true}
        Tags:
          - Key: "Name"
            Value: "ServerlessSecurityGroup"

plugins:
  - serverless-go-plugin
